import 'package:cloud_firestore/cloud_firestore.dart';

class RouteModel {
  final String? id; // Route ID (can be auto-generated by Firestore)
  final String groupId; // ID of the group this route belongs to
  final String heading; // Heading/title of the stop
  final String name; // Name of the stop
  final String typeOfStop; // Type/category of the stop
  final DateTime time; // Scheduled time for the stop
  final String totalTime; // Duration spent at the stop
  final String location; // Address/location
  final String description; // Description of the stop
  final String purpose; // Purpose of the stop
  final DateTime createdAt; // Timestamp of when the route was created
  final String createdBy; // ID of the manager who created the route
  final int orderIndex; // Position of the route in the list

  RouteModel({
    this.id,
    required this.groupId,
    required this.heading,
    required this.name,
    required this.typeOfStop,
    required this.time,
    required this.totalTime,
    required this.location,
    required this.description,
    required this.purpose,
    required this.createdAt,
    required this.createdBy,
    required this.orderIndex,
  });

  // Factory method to create a RouteModel from Firestore data
  factory RouteModel.fromMap(String id, Map<String, dynamic> data) {
    return RouteModel(
      id: id,
      groupId: data['groupId'] as String,
      heading: data['heading'] as String,
      name: data['name'] as String,
      typeOfStop: data['typeOfStop'] as String,
      time: (data['time'] as Timestamp).toDate(),
      totalTime: data['totalTime'] as String,
      location: data['location'] as String,
      description: data['description'] as String,
      purpose: data['purpose'] as String,
      createdAt: (data['createdAt'] as Timestamp).toDate(),
      createdBy: data['createdBy'] as String,
      orderIndex: data['orderIndex'] as int,
    );
  }

  // Convert a RouteModel to a map for Firestore
  Map<String, dynamic> toMap() {
    return {
      'groupId': groupId,
      'heading': heading,
      'name': name,
      'typeOfStop': typeOfStop,
      'time': Timestamp.fromDate(time),
      'totalTime': totalTime,
      'location': location,
      'description': description,
      'purpose': purpose,
      'createdAt': Timestamp.fromDate(createdAt),
      'createdBy': createdBy,
      'orderIndex': orderIndex,
    };
  }
}
